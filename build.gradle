buildscript {
	apply from: 'repositories.gradle'
	repositories localRepositories.source as Closure
	dependencies {
		classpath "uk.co.ceilingcat:gradle.plugins.SemanticVersionsPlugin:${versions_semantic_versions}"
	}
}

plugins {
	id 'jacoco'
	id 'org.jetbrains.dokka' version "${versions_dokka}"
	id 'org.jetbrains.kotlin.jvm' version "${versions_kotlin}"
	id 'org.jlleitschuh.gradle.ktlint' version "${versions_klint}"
    id "org.jetbrains.kotlin.kapt" version "1.4.30-M1"
}
apply plugin: 'uk.co.ceilingcat.SemanticVersions'

group = 'uk.co.ceilingcat.rayTracingInOneWeekend'
description = 'Ray Tracing in One Weekend in Kotlin'

dependencies {
    implementation "io.arrow-kt:arrow-core:${versions_arrow}"
    implementation "io.arrow-kt:arrow-syntax:${versions_arrow}"
    kapt    "io.arrow-kt:arrow-meta:${versions_arrow}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions_kotlin}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions_junit_jupiter}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions_junit_jupiter}"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8 as String
    }
}

repositories localRepositories.source as Closure

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    useJUnitPlatform()

    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

dokkaHtml {
    dokkaSourceSets {
        configureEach {
            jdkVersion.set(11)
            displayName.set('JVM')
            includes.from('src/main/kotlin/packages.md')
            remoteUrl.set(java.net.URL(
                'https://github.com/chrisdenman/rrd-xlsx-gateway/tree/main/src/main/kotlin'))
        }
    }
}

task dokkaJar(type: Jar, dependsOn: dokkaHtml, group: 'packaging') {
    getArchiveClassifier().set('javadoc')
    from javadoc.destinationDir
}

setProjectVersion.dependsOn patchIncrement
patchIncrement.onlyIf(new Spec<Task>() {
    boolean isSatisfiedBy(Task task) {
        !task.project.hasProperty('isRelease')
    }
})

setProjectVersion.dependsOn patchIncrement
[dokkaHtml, compileKotlin].each {
    it.dependsOn setProjectVersion
}
[ktlintMainSourceSetCheck, ktlintTestSourceSetCheck].each { it.dependsOn ktlintFormat }
check.dependsOn jacocoTestReport
[jar, dokkaHtml].each { it.dependsOn check }
